(define (error msg)
  (display msg))
(define (quote-string str)
  (let ((len (string-length str)))
    (letrec ((recurse
              (lambda (i so-far)
                (if (< i len)
                    (let ((c (string-ref str i)))
                      (recurse
                       (+ i 1)
                       (string-append
                        so-far
                        (case c
                          ((#\") (string-append "\\" (string #\")))
                          ((#\\) "\\\\")
                          ((#\newline) "\\n")
                          (else (string c))))))
                  so-far))))
            (string-append (recurse 0 (string #\")) (string #\")))))
(define str
  (lambda (x)
    (cond ((number? x) x)
          ((symbol? x) (symbol->string x))
          ((pair? x) "Pair")
          ((string? x) (string-append (quote-string x) ))
          ((list? x) "List"))))
(define (memq+ x ls)
  (if (pair? ls)
      (if (eq? (car ls) x) ls
          (memq+ x (cdr ls)))
      (if (eq? x ls) ls #f)))
(define memq memq+)
(define (js-char c)
  (define char-code (char->integer c))
  (if (>= char-code 32) (string c)
      (string-append "\\x" (if (< char-code 16) "0" "")
                     (number->string char-code 16))))
(define genSymBase 0)
(define (gen-sym)
  (let ([sn (number->string genSymBase)])
    (set! genSymBase (+ genSymBase 1))
    (string->symbol (string-append "_" sn "_"))))
(define (map+ f . lst)
  (define r '())
  (define o #f)
  (define p #f)
  (define (map-lst op l)
    (if (pair? l) (cons (op (car l)) (map-lst op (cdr l))) '()))
  (define (do-map)
    (if (pair? (car lst)) (begin
          (set! o (cons (apply f (map car lst)) '()))
          (if (null? r) (set! r o) (set-cdr! p o))
          (set! p o)
          (set! lst (map cdr lst))
          (do-map))
      (if (not (null? (car lst)))
         (if p (set-cdr! p (apply f lst))
               (set! r (apply f lst))))))
  (do-map) r)
(define (read-file name)
  (call-with-input-file
   name (lambda (port)
          (letrec
           ((recur (lambda ()
                     (let ((expr (read port)))
                       (if (eof-object? expr)
                           '()
                         (cons expr (recur)))))))
           (recur)))))

(load "src/compiler.scm")

(compile-lib (read-file "src/lib/std.scm"))
(compile-lib (read-file "src/compiler.scm"))
